# Sweep Configuration File
# This file contains the rules and settings for the Sweep AI service.
# It defines the configuration for automated code assistance tasks provided by Sweep.

# Sweep AI turns bugs & feature requests into code changes (https://sweep.dev)
# For details on our config file, check out our docs at https://docs.sweep.dev/usage/config

# This setting specifies code quality rules that should be followed. Manual intervention is required to address any issues related to these rules.
rules:
- "All new business logic should have corresponding unit tests."
- "Refactor large functions to be more modular."
- "Add docstrings to all functions and file headers."

- "Cherry-pick a merged PR by commenting `/cherry-pick <target branch>`"
- "Build and push container image by commenting `/build-and-push-container`"


# This is the branch that Sweep will develop from and make pull requests to. Most people use 'main' but some users also use 'dev' or 'staging'.
branch: 'main'

# Set to false to prevent Sweep from reading logs and outputs from existing Github Actions.
gha_enabled: True

# This is the description of your project. It will be used by sweep when creating PRs. You can tell Sweep what's unique about your project, what frameworks you use, or anything else you want.
#
# Example:
# Provide a brief description of your project to guide the context of changes made by Sweep.
description: ''

# If set to True, pull requests created by Sweep will be drafts, not triggering GitHub Actions.
draft: False

# This is a list of directories that Sweep will not be able to edit.
blocked_dirs: []

# This is a list of documentation links that Sweep will use to help it understand your code. You can add links to documentation for any packages you use here.
#
# Example:
#
# Documentation References
# Add references to external documentation to inform Sweep about your codebase's dependencies.
# docs:
#   - PyGitHub: ["https://pygithub.readthedocs.io/en/latest/", "We use pygithub to interact with the GitHub API"]
docs: []
# The 'sandbox' section configures commands to validate code changes in a controlled environment. Refer to the Sandbox documentation for details.
sandbox:
  install:
    - trunk init
  check:
    - trunk fmt {file_path} || return 0
    - trunk check --fix --print-failures {file_path}
